//= require jquery
//= require jquery_ujs
//= require jquery.validate
//= require jquery.cookie
//= require jquery-ui
//= require bootstrap
//= require jquery.event.drag-2.2
//= require jquery.autogrowtextarea
//= require jquery.timeago
//= require jquery.form
//= require store
//= require jquery.masonry
//= require jquery.flot
//= require jquery.tinymce
//= require jquery.fn.gantt
//= require slickgrid/slick.core
//= require slickgrid/slick.grid
//= require slickgrid/slick.formatters
//= require slickgrid/slick.groupitemmetadataprovider
//= require slickgrid/slick.dataview
//= require slickgrid/plugins/slick.rowselectionmodel
//= require fullcalendar
//= require json2
//= require slimbox2
//= require select2

//= require ajax_spinner
//= require grid
//= require grids/columnpicker
//= require task
//= require unified_search
//= require score_rules
//= require trigger
//= require filter
//= require widget
//= require calendar
//= require services
//= require timeline
//= require persistent_timer
//= require mce_init
//= require gantt
//= require task_property_edit
//= require custom_attribute_edit
//= require_tree ./tasks
//= require user_permissions
//= require project_permissions
//= require email_addresses
//


jQuery.noConflict();

// Borrowed from jQuery 1.8.3's source code
jQuery.fn.extend({
  live: function( types, data, fn ) {
          jQuery( this.context ).on( types, this.selector, data, fn );
          return this;
        }
});

jQuery.widget("custom.catcomplete", jQuery.ui.autocomplete, {
  _renderMenu: function( ul, items ) {
    var self = this,
    currentCategory = "";
    jQuery.each( items, function( index, item ) {
      if ( item.category != currentCategory ) {
        ul.append( "<li class='ui-autocomplete-category'>" + item.category + "</li>" );
        currentCategory = item.category;
      }
      self._renderItemData( ul, item );
    });
  }
});

/*
  Requests the available attributes for the given resource type
  and updates the page with the returned values.
*/
function updateResourceAttributes(select) {
    select = jQuery(select);
    var typeId = select.val();
    var target = jQuery("#attributes");

    if (typeId == "") {
        target.html("");
    }
    else {
        var url = "/resources/attributes/?type_id=" + typeId;
        jQuery.get(url, function(data) {
            target.html(data);
        }, 'html');
    }
}

/*
  Removes the resource attribute to the link
*/
function removeAttribute(link) {
    link = jQuery(link);
    link.parents(".control-group").remove();
}

/*
  Adds a new field to allow people to have multiple values
  for resource attributes.
*/
function addAttribute(link) {
    link = jQuery(link);
    var origAttribute = link.parents(".control-group");

    var newAttribute = origAttribute.clone();
    newAttribute.find(".value").val("");
    newAttribute.find("a.add_attribute").remove();
    newAttribute.find(".attr_id").remove();

    var removeLink = newAttribute.find("a.remove_attribute");
    // for some reason this onclick needs to be manually set after cloning
    removeLink.click(function() { removeAttribute(removeLink); });
    removeLink.show();

    origAttribute.parents("#attributes-container").append(newAttribute);
}


// I'm not sure why, but we seem to need to add these for the event
// to fire - onclick doesn't seem to work.
jQuery(document).ready(function() {
    jQuery(".remove_attribute").click(function(evt) {
        removeAttribute(evt.target);
    });
});

jQuery(document).ready(function() {
   jQuery(document).on('click','#default .removeLink', function() {
      jQuery(this).parents("#default").remove();
      return false;
   });
});

jQuery(document).ready(function() {
  jQuery("#attributes").sortable({
    handle: ".handle.custom_attribute",
    update: function() { updatePositionFields('#attributes'); }
  });

  jQuery('.attribute .choices').sortable({
    handle: ".handle.custom_attribute_choice",
    update: function() {updatePositionFields('.attribute .choices'); }
  });

  jQuery('#resource_type_attributes').sortable({
    handle: ".handle.resource_type_attribute",
    update: function(){updatePositionFields('#resource_type_attributes'); }
  });

});

function updatePositionFields(listSelector) {
    var list = jQuery(listSelector);
    var children = list.children();

    for (var i = 0; i < children.length; i++) {
        var positionField = jQuery(children[i]).find(".position");
        positionField.val(i + 1);
    }
}

/*
 Adds fields to setup a new custom attribute choice.
*/
function addAttributeChoices(sender) {
    var choices = jQuery(sender).parent().find('.choices');
    var attribute = jQuery(sender).parents(".attribute");
    var attrId = attribute.attr("id").split("_").pop();

    if (attrId == "attribute") {
        // new attribute, so just ignore
        attrId = "";
    }
    var url = "/custom_attributes/choice/" + attrId;

    jQuery.get(url, function(data) {
      jQuery(choices).append(data);
      updatePositionFields(choices);
    }, 'html')
}

/*
  For the resources edit page.
  Retrieves the password from the given url, and updated
  the nearest password div with the returned value.
*/
function showPassword(link, url) {
    link = jQuery(link);
    link.hide();

    var passwordDiv = link.prev(".password");
    passwordDiv.load(url);
}


/*
  Toggles the approval status of the given work log
*/
function toggleWorkLogApproval(sender, workLogId) {
    jQuery.post("/work_logs/update_work_log", {
        id : workLogId,
        "work_log[status]" : jQuery(sender).val() });
}

/*
 This function adds in the selected value to the previous autocomplete.
 The autocomplete text field itself will be updated with the name, and
 a hidden field directly before the text field will be updated with the object id.
*/
function updateAutoCompleteField(event, ui) {
  jQuery("#resource_customer_id").val(ui.item.id);
  jQuery('#resource_customer_link').attr("href", "/customers/edit/" + ui.item.id);
}

jQuery(document).ready(function() {
  autocomplete('#resource_customer_name', '/customers/auto_complete_for_customer_name', updateAutoCompleteField);
  autocomplete('#project_customer_name', '/customers/auto_complete_for_customer_name', addCustomerToProject);
  autocomplete('#user_customer_name', '/customers/auto_complete_for_customer_name', addCustomerToUser);
  autocomplete('#default_user_name_auto_complete', '/users/auto_complete_for_user_name', addDefaultUser);
  jQuery(".datefield").datepicker({ constrainInput: false, dateFormat: userDateFormat});
});

/*Adds the selected customer to the new project*/
function addCustomerToProject(event, ui){
  jQuery('#project_customer_id').val(ui.item.id);
  jQuery('#project_customer_link').attr("href", "/customers/edit/" + ui.item.id);
}

function addDefaultUser(event,ui) {
  var userId = ui.item.id;
    var params = { user_id : userId};
    addUser('/projects/add_default_user', params);

    jQuery("#default_user_name_auto_complete").val("");
    return false;
  }
function addCustomerToUser(event, ui){
  jQuery('#user_customer_id').val(ui.item.id);
  jQuery('#user_customer_link').attr("href", "/customers/edit/" + ui.item.id);
}
function addUser(url, params) {
    var self = this;
    jQuery.get(url, params, function(data) {
    jQuery("#default_users > div:first").append(data);
    jQuery(self.el).trigger("users:changed");
    }, 'html');
  }

function autocomplete(input_field, path, after_callback) {
  jQuery(input_field).autocomplete({
    source: path,
    select: after_callback,
    delay: 800,
    minlength: 3
  })
}

function autocomplete_multiple_remote(input_field, path){
    jQuery(function(){
        function split(val) {
                 return val.split(/,\s*/);
        }
        function extractLast(term) {
                 return split(term).pop();
                }
        jQuery(input_field).autocomplete({
            source: function(request, response) {
                                jQuery.getJSON(path, {
                                        term: extractLast(request.term)
                                }, response);
            },
            search: function() {
                                var term = extractLast(this.value);
                                if (term.length < 2) {
                                        return false;
                                }
                        },
            focus: function() {
                    return false;
            },
            select: function(event, ui) {
                    var terms = split( this.value );
                    terms.pop();
                    terms.push( ui.item.value );
                    terms.push("");
                    this.value = terms.join(", ");
                    return false;
            }

        });

     });

}

function html_decode(value) {
  if(value=='&nbsp;' || value=='&#160;' || (value.length==1 && value.charCodeAt(0)==160)) { return "";}
  return !value ? value : String(value).replace(/&gt;/g, ">").replace(/&lt;/g, "<").replace(/&quot;/g, '"').replace(/&amp;/g, "&");
}

function flash_message(message) {
  jQuery(".alert").remove();
  jQuery(".navbar").after(html_decode(message));
}

function authorize_ajax_form_callback(json) {
  if (json.status == "session timeout") {
    window.location = "/users/sign_in";
    return false;
  }
}

function collapsiblePanel(panel) {
  if (store.get('sidepanel_' + panel) == 'h') {
    jQuery('div#' + panel +' .panel_content').hide();
    jQuery('div#' + panel +' .collapsable-sidepanel-button').addClass('panel-collapsed');
  } else {
    jQuery('div#' + panel +' .collapsable-sidepanel-button').addClass('panel-open');
  }
}

jQuery(function(){
  for (i=0; i<jQuery(".collapsable-sidepanel-button").length; i++){
    var panel= jQuery(".collapsable-sidepanel-button").parent().eq(i).attr('id');
    collapsiblePanel(panel);
  };
});

jQuery(document).ready(function () {
  jQuery("[rel=tooltip]").tooltip();
  jQuery("[rel=popover]").popover({trigger: "hover", html: true});

  // fix checkbox in nested form has no effect for new record
  jQuery("input.nested-checkbox").live("change", function() {
    checkbox = jQuery(this);
    var checked = checkbox.attr("checked");

    var hiddenField = checkbox.prev();
    if (hiddenField.attr("name") == checkbox.attr("name")) {
      hiddenField.attr("disabled", checked);
    }
  })

});

